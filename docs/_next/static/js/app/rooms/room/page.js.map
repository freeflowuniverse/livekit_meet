{"version":3,"file":"static/js/app/rooms/room/page.js","mappings":"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","sources":["webpack://_N_E/?e9f0","webpack://_N_E/./lib/RecordingIndicator.tsx","webpack://_N_E/./app/rooms/room/PageClientImpl.tsx","webpack://_N_E/./app/rooms/room/page.tsx"],"sourcesContent":["import(/* webpackMode: \"eager\" */ \"/Users/timurgordon/code/github/freeflowuniverse/livekit_meet/app/rooms/room/page.tsx\");\n","import { useIsRecording } from '@livekit/components-react';\nimport * as React from 'react';\n\nexport function RecordingIndicator() {\n  const isRecording = useIsRecording();\n  const [wasRecording, setWasRecording] = React.useState(false);\n\n  React.useEffect(() => {\n    if (isRecording !== wasRecording) {\n      setWasRecording(isRecording);\n      if (isRecording) {\n        window.alert('This meeting is being recorded');\n      }\n    }\n  }, [isRecording]);\n\n  return (\n    <div\n      style={{\n        position: 'absolute',\n        top: '0',\n        left: '0',\n        width: '100%',\n        height: '100%',\n        boxShadow: isRecording ? 'red 0px 0px 0px 3px inset' : 'none',\n        pointerEvents: 'none',\n      }}\n    ></div>\n  );\n}\n","'use client';\n\nimport { decodePassphrase } from '@/lib/client-utils';\nimport { DebugMode } from '@/lib/Debug';\nimport { RecordingIndicator } from '@/lib/RecordingIndicator';\nimport { SettingsMenu } from '@/lib/SettingsMenu';\nimport { ConnectionDetails } from '@/lib/types';\nimport {\n  formatChatMessageLinks,\n  LiveKitRoom,\n  LocalUserChoices,\n  PreJoin,\n  VideoConference,\n} from '@livekit/components-react';\nimport {\n  ExternalE2EEKeyProvider,\n  RoomOptions,\n  VideoCodec,\n  VideoPresets,\n  Room,\n  DeviceUnsupportedError,\n  RoomConnectOptions,\n} from 'livekit-client';\nimport { useRouter } from 'next/navigation';\nimport React, { useEffect, useState, useMemo, useCallback } from 'react';\n\nconst CONN_DETAILS_ENDPOINT = process.env.NEXT_PUBLIC_CONN_DETAILS_ENDPOINT ?? '/api/connection-details';\nconst SHOW_SETTINGS_MENU = process.env.NEXT_PUBLIC_SHOW_SETTINGS_MENU == 'true';\n\nexport function PageClientImpl(props: {\n  roomName: string;\n  region?: string;\n  hq: boolean;\n  codec: VideoCodec;\n}) {\n  const [preJoinChoices, setPreJoinChoices] = useState<LocalUserChoices | undefined>(undefined);\n  const [connectionDetails, setConnectionDetails] = useState<ConnectionDetails | undefined>(undefined);\n\n  const preJoinDefaults = useMemo(() => {\n    return {\n      username: '',\n      videoEnabled: true,\n      audioEnabled: true,\n    };\n  }, []);\n\n  const handlePreJoinSubmit = useCallback(async (values: LocalUserChoices) => {\n    setPreJoinChoices(values);\n\n    try {\n      const url = new URL(CONN_DETAILS_ENDPOINT, window.location.origin);\n      url.searchParams.append('roomName', props.roomName);\n      url.searchParams.append('participantName', values.username);\n      if (props.region) {\n        url.searchParams.append('region', props.region);\n      }\n\n      const connectionDetailsResp = await fetch(url.toString());\n      const connectionDetailsData = await connectionDetailsResp.json();\n      setConnectionDetails(connectionDetailsData);\n    } catch (error) {\n      console.error('Error fetching connection details:', error);\n    }\n  }, [props.roomName, props.region]);\n\n  const handlePreJoinError = useCallback((e: any) => console.error(e), []);\n\n  return (\n    <main data-lk-theme=\"default\" style={{ height: '100%' }}>\n      {connectionDetails === undefined || preJoinChoices === undefined ? (\n        <div style={{ display: 'grid', placeItems: 'center', height: '100%' }}>\n          <PreJoin\n            defaults={preJoinDefaults}\n            onSubmit={handlePreJoinSubmit}\n            onError={handlePreJoinError}\n          />\n        </div>\n      ) : (\n        <VideoConferenceComponent\n          connectionDetails={connectionDetails}\n          userChoices={preJoinChoices}\n          options={{ codec: props.codec, hq: props.hq }}\n        />\n      )}\n    </main>\n  );\n}\n\nfunction VideoConferenceComponent(props: {\n  userChoices: LocalUserChoices;\n  connectionDetails: ConnectionDetails;\n  options: {\n    hq: boolean;\n    codec: VideoCodec;\n  };\n}) {\n  const e2eePassphrase = typeof window !== 'undefined' && decodePassphrase(location.hash.substring(1));\n  const worker = typeof window !== 'undefined' && e2eePassphrase && new Worker(new URL('livekit-client/e2ee-worker', import.meta.url));\n  const e2eeEnabled = !!(e2eePassphrase && worker);\n  const keyProvider = new ExternalE2EEKeyProvider();\n  const [e2eeSetupComplete, setE2eeSetupComplete] = useState(false);\n\n  const roomOptions = useMemo((): RoomOptions => {\n    let videoCodec: VideoCodec | undefined = props.options.codec ? props.options.codec : 'vp9';\n    if (e2eeEnabled && (videoCodec === 'av1' || videoCodec === 'vp9')) {\n      videoCodec = undefined;\n    }\n    return {\n      videoCaptureDefaults: {\n        deviceId: props.userChoices.videoDeviceId ?? undefined,\n        resolution: props.options.hq ? VideoPresets.h2160 : VideoPresets.h720,\n      },\n      publishDefaults: {\n        dtx: false,\n        videoSimulcastLayers: props.options.hq ? [VideoPresets.h1080, VideoPresets.h720] : [VideoPresets.h540, VideoPresets.h216],\n        red: !e2eeEnabled,\n        videoCodec,\n      },\n      audioCaptureDefaults: {\n        deviceId: props.userChoices.audioDeviceId ?? undefined,\n      },\n      adaptiveStream: { pixelDensity: 'screen' },\n      dynacast: true,\n      e2ee: e2eeEnabled ? { keyProvider, worker } : undefined,\n    };\n  }, [props.userChoices, props.options.hq, props.options.codec]);\n\n  const room = useMemo(() => new Room(roomOptions), [roomOptions]);\n\n  useEffect(() => {\n    if (e2eeEnabled) {\n      keyProvider.setKey(decodePassphrase(e2eePassphrase)).then(() => {\n        room.setE2EEEnabled(true).catch((e) => {\n          if (e instanceof DeviceUnsupportedError) {\n            alert(`Your browser does not support encrypted meetings. Please update it and try again.`);\n            console.error(e);\n          } else {\n            throw e;\n          }\n        });\n      }).then(() => setE2eeSetupComplete(true));\n    } else {\n      setE2eeSetupComplete(true);\n    }\n  }, [e2eeEnabled, room, e2eePassphrase, keyProvider]);\n\n  const connectOptions = useMemo((): RoomConnectOptions => ({ autoSubscribe: true }), []);\n  const router = useRouter();\n  const handleOnLeave = useCallback(() => router.push('/'), [router]);\n\n  return (\n    <>\n      <LiveKitRoom\n        connect={e2eeSetupComplete}\n        room={room}\n        token={props.connectionDetails.participantToken}\n        serverUrl={props.connectionDetails.serverUrl}\n        connectOptions={connectOptions}\n        video={props.userChoices.videoEnabled}\n        audio={props.userChoices.audioEnabled}\n        onDisconnected={handleOnLeave}\n        onError={(error) => console.error(error)}\n      >\n        <VideoConference\n          chatMessageFormatter={formatChatMessageLinks}\n          SettingsComponent={SHOW_SETTINGS_MENU ? SettingsMenu : undefined}\n        />\n        <DebugMode />\n        <RecordingIndicator />\n      </LiveKitRoom>\n    </>\n  );\n}","\"use client\";\nexport const dynamic = 'force-dynamic';\n\nimport * as React from 'react';\nimport { Suspense } from 'react';\nimport { useSearchParams } from 'next/navigation';\nimport { PageClientImpl } from './PageClientImpl';\nimport { isVideoCodec } from '@/lib/types';\n\nfunction RoomContent() {\n  const searchParams = useSearchParams();\n  const roomName = searchParams.get('roomName') || 'defaultRoom';\n  const region = searchParams.get('region') || undefined;\n  const codecParam = searchParams.get('codec');\n  const codec = codecParam && isVideoCodec(codecParam) ? codecParam : 'vp9';\n  const hq = searchParams.get('hq') === 'true';\n\n  return (\n    <PageClientImpl roomName={roomName} region={region} hq={hq} codec={codec} />\n  );\n}\n\nexport default function RoomPage() {\n  return (\n    <Suspense fallback={<div>Loading...</div>}>\n      <RoomContent />\n    </Suspense>\n  );\n}"],"names":["RecordingIndicator","isRecording","useIsRecording","wasRecording","setWasRecording","React","window","alert","div","style","position","top","left","width","height","boxShadow","pointerEvents","process","CONN_DETAILS_ENDPOINT","env","NEXT_PUBLIC_CONN_DETAILS_ENDPOINT","SHOW_SETTINGS_MENU","NEXT_PUBLIC_SHOW_SETTINGS_MENU","PageClientImpl","props","preJoinChoices","setPreJoinChoices","useState","undefined","connectionDetails","setConnectionDetails","preJoinDefaults","useMemo","username","videoEnabled","audioEnabled","handlePreJoinSubmit","useCallback","async","values","url","URL","location","origin","searchParams","append","roomName","region","connectionDetailsResp","fetch","toString","connectionDetailsData","json","error","console","handlePreJoinError","e","main","data-lk-theme","display","placeItems","PreJoin","defaults","onSubmit","onError","VideoConferenceComponent","userChoices","options","codec","hq","e2eePassphrase","decodePassphrase","hash","substring","worker","Worker","e2eeEnabled","keyProvider","ExternalE2EEKeyProvider","e2eeSetupComplete","setE2eeSetupComplete","roomOptions","videoCodec","videoCaptureDefaults","deviceId","videoDeviceId","resolution","VideoPresets","h2160","h720","publishDefaults","dtx","videoSimulcastLayers","h1080","h540","h216","red","audioCaptureDefaults","audioDeviceId","adaptiveStream","pixelDensity","dynacast","e2ee","room","Room","useEffect","setKey","then","setE2EEEnabled","catch","DeviceUnsupportedError","connectOptions","autoSubscribe","router","useRouter","handleOnLeave","push","LiveKitRoom","connect","token","participantToken","serverUrl","video","audio","onDisconnected","VideoConference","chatMessageFormatter","formatChatMessageLinks","SettingsComponent","SettingsMenu","DebugMode","dynamic","RoomContent","useSearchParams","get","codecParam","isVideoCodec","RoomPage","Suspense","fallback"],"sourceRoot":""}