{"version":3,"file":"static/chunks/app/custom/page-4941f838634ba1fb.js","mappings":"mFAAA,sC,+NCiBO,SAASA,EAA0BC,GAKxC,MAAMC,EAEJ,IAAIC,OAAO,SAAIC,IAAI,oBACfC,EAAc,IAAIC,EAAAA,GAElBC,GAC4BC,EAAAA,EAAAA,IAAiBC,OAAOC,SAASC,KAAKC,UAAU,IAC5EC,KAAiBN,IAAkBL,GACnCY,GAAcC,EAAAA,EAAAA,UAAQ,KACnB,CACLC,gBAAiB,CACfC,qBAAsB,CAACC,EAAAA,GAAaC,KAAMD,EAAAA,GAAaE,MACvDC,KAAMR,EACNS,WAAYrB,EAAMsB,OAEpBC,eAAgB,CAAEC,aAAc,UAChCC,UAAU,EACVC,KAAMd,EACF,CACER,cACAH,eAEF0B,KAEL,IAEGC,GAAOd,EAAAA,EAAAA,UAAQ,IAAM,IAAIe,EAAAA,GAAKhB,IAAc,IAC9CD,IACFR,EAAY0B,OAAOxB,GACnBsB,EAAKG,gBAAe,IAEtB,MAAMC,GAAiBlB,EAAAA,EAAAA,UAAQ,KACtB,CACLmB,eAAe,KAEhB,IAEH,OACE,UAACC,EAAAA,EAAWA,CACVN,KAAMA,EACNO,MAAOnC,EAAMmC,MACbH,eAAgBA,EAChBI,UAAWpC,EAAMqC,WACjBC,OAAO,EACPC,OAAO,E,WAEP,SAACC,EAAAA,GAAeA,CACdC,qBAAsBC,EAAAA,EACtBC,kBACiD,SAA/CC,EAAQC,IAAIC,+BAA4CC,EAAAA,OAAepB,KAG3E,SAACqB,EAAAA,EAASA,CAACC,SAAUC,EAAAA,GAASC,UAGpC,C,cC5EO,MAAMC,EAAU,gBASvB,SAASC,IACP,MAAMC,GAAeC,EAAAA,EAAAA,mBACflB,EAAaiB,EAAaE,IAAI,cAC9BrB,EAAQmB,EAAaE,IAAI,SACzBC,EAAaH,EAAaE,IAAI,SAEpC,GAA0B,kBAAfnB,EACT,OAAO,SAACqB,KAAAA,C,SAAG,wBAEb,GAAqB,kBAAVvB,EACT,OAAO,SAACuB,KAAAA,C,SAAG,0BAGb,MAAMpC,EAAQmC,IAAcE,EAAAA,EAAAA,GAAaF,GAAcA,OAAa9B,EAEpE,OAAmB,OAAf8B,IAAwBE,EAAAA,EAAAA,GAAaF,IAKvC,SAACG,OAAAA,CAAKC,gBAAc,UAAUC,MAAO,CAAEC,OAAQ,Q,UAC7C,SAAChE,EAAyBA,CAACsC,WAAYA,EAAYF,MAAOA,EAAOb,MAAOA,OALnE,UAACoC,KAAAA,C,UAAG,2CAAyCM,EAAAA,GAAYC,KAAK,MAAM,OAQ/E,CAEe,SAASC,IACtB,OACE,SAACC,EAAAA,SAAQA,CAACC,UAAU,SAACC,MAAAA,C,SAAI,e,UACvB,SAAChB,EAAAA,CAAAA,IAGP,C","sources":["webpack://_N_E/?9d05","webpack://_N_E/./app/custom/VideoConferenceClientImpl.tsx","webpack://_N_E/./app/custom/page.tsx"],"sourcesContent":["import(/* webpackMode: \"eager\" */ \"/Users/timurgordon/code/github/freeflowuniverse/livekit_meet/app/custom/page.tsx\");\n","'use client';\n\nimport { formatChatMessageLinks, LiveKitRoom, VideoConference } from '@livekit/components-react';\nimport {\n  ExternalE2EEKeyProvider,\n  LogLevel,\n  Room,\n  RoomConnectOptions,\n  RoomOptions,\n  VideoPresets,\n  type VideoCodec,\n} from 'livekit-client';\nimport { DebugMode } from '@/lib/Debug';\nimport { useMemo } from 'react';\nimport { decodePassphrase } from '@/lib/client-utils';\nimport { SettingsMenu } from '@/lib/SettingsMenu';\n\nexport function VideoConferenceClientImpl(props: {\n  liveKitUrl: string;\n  token: string;\n  codec: VideoCodec | undefined;\n}) {\n  const worker =\n    typeof window !== 'undefined' &&\n    new Worker(new URL('livekit-client/e2ee-worker', import.meta.url));\n  const keyProvider = new ExternalE2EEKeyProvider();\n\n  const e2eePassphrase =\n    typeof window !== 'undefined' ? decodePassphrase(window.location.hash.substring(1)) : undefined;\n  const e2eeEnabled = !!(e2eePassphrase && worker);\n  const roomOptions = useMemo((): RoomOptions => {\n    return {\n      publishDefaults: {\n        videoSimulcastLayers: [VideoPresets.h540, VideoPresets.h216],\n        red: !e2eeEnabled,\n        videoCodec: props.codec,\n      },\n      adaptiveStream: { pixelDensity: 'screen' },\n      dynacast: true,\n      e2ee: e2eeEnabled\n        ? {\n            keyProvider,\n            worker,\n          }\n        : undefined,\n    };\n  }, []);\n\n  const room = useMemo(() => new Room(roomOptions), []);\n  if (e2eeEnabled) {\n    keyProvider.setKey(e2eePassphrase);\n    room.setE2EEEnabled(true);\n  }\n  const connectOptions = useMemo((): RoomConnectOptions => {\n    return {\n      autoSubscribe: true,\n    };\n  }, []);\n\n  return (\n    <LiveKitRoom\n      room={room}\n      token={props.token}\n      connectOptions={connectOptions}\n      serverUrl={props.liveKitUrl}\n      audio={true}\n      video={true}\n    >\n      <VideoConference\n        chatMessageFormatter={formatChatMessageLinks}\n        SettingsComponent={\n          process.env.NEXT_PUBLIC_SHOW_SETTINGS_MENU === 'true' ? SettingsMenu : undefined\n        }\n      />\n      <DebugMode logLevel={LogLevel.debug} />\n    </LiveKitRoom>\n  );\n}\n","\"use client\"; // Mark this as a client component\nexport const dynamic = 'force-dynamic'; // Ensure this page is dynamically rendered\n\nimport * as React from 'react';\nimport { Suspense } from 'react';\nimport { useSearchParams } from 'next/navigation';\nimport { videoCodecs } from 'livekit-client';\nimport { VideoConferenceClientImpl } from './VideoConferenceClientImpl';\nimport { isVideoCodec } from '@/lib/types';\n\nfunction CustomRoomContent() {\n  const searchParams = useSearchParams();\n  const liveKitUrl = searchParams.get('liveKitUrl');\n  const token = searchParams.get('token');\n  const codecParam = searchParams.get('codec');\n\n  if (typeof liveKitUrl !== 'string') {\n    return <h2>Missing LiveKit URL</h2>;\n  }\n  if (typeof token !== 'string') {\n    return <h2>Missing LiveKit token</h2>;\n  }\n\n  const codec = codecParam && isVideoCodec(codecParam) ? codecParam : undefined;\n\n  if (codecParam !== null && !isVideoCodec(codecParam)) {\n    return <h2>Invalid codec, if defined it has to be [{videoCodecs.join(', ')}].</h2>;\n  }\n\n  return (\n    <main data-lk-theme=\"default\" style={{ height: '100%' }}>\n      <VideoConferenceClientImpl liveKitUrl={liveKitUrl} token={token} codec={codec} />\n    </main>\n  );\n}\n\nexport default function CustomRoomConnection() {\n  return (\n    <Suspense fallback={<div>Loading...</div>}>\n      <CustomRoomContent />\n    </Suspense>\n  );\n}"],"names":["VideoConferenceClientImpl","props","worker","Worker","URL","keyProvider","ExternalE2EEKeyProvider","e2eePassphrase","decodePassphrase","window","location","hash","substring","e2eeEnabled","roomOptions","useMemo","publishDefaults","videoSimulcastLayers","VideoPresets","h540","h216","red","videoCodec","codec","adaptiveStream","pixelDensity","dynacast","e2ee","undefined","room","Room","setKey","setE2EEEnabled","connectOptions","autoSubscribe","LiveKitRoom","token","serverUrl","liveKitUrl","audio","video","VideoConference","chatMessageFormatter","formatChatMessageLinks","SettingsComponent","process","env","NEXT_PUBLIC_SHOW_SETTINGS_MENU","SettingsMenu","DebugMode","logLevel","LogLevel","debug","dynamic","CustomRoomContent","searchParams","useSearchParams","get","codecParam","h2","isVideoCodec","main","data-lk-theme","style","height","videoCodecs","join","CustomRoomConnection","Suspense","fallback","div"],"sourceRoot":""}